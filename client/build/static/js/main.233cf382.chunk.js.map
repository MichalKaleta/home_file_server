{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","uploadDisabled","setUploadDisabled","amount","size","filesInfo","setFilesInfo","files","setFiles","labelFor","className","method","action","encType","onSubmit","e","preventDefault","formData","FormData","target","file","dir","webkitRelativePath","slice","name","length","append","axios","post","then","res","data","console","log","catch","err","htmlFor","id","type","webkitdirectory","mozdirectory","onChange","Array","prototype","forEach","call","parseInt","disabled","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iQAoFeA,MAhFf,WAAgB,IAAD,EAE8BC,oBAAS,GAFvC,mBAEPC,EAFO,KAESC,EAFT,OAGoBF,mBAAS,CAAEG,OAAQ,EAAGC,KAAM,IAHhD,mBAGPC,EAHO,KAGIC,EAHJ,OAIYN,mBAAS,IAJrB,mBAIPO,EAJO,KAIAC,EAJA,KAsCRC,EAAWR,EAAiB,4BAA8B,4BAE9D,OACG,yBAAKS,UAAU,OACZ,yBACGA,UAAU,aACXL,EAAUF,OAFZ,iBAEiC,6BAAOE,EAAUD,KAFlD,eAIA,0BACGM,UAAU,cACVC,OAAO,OACPC,OAAO,UACPC,QAAQ,sBACRC,SA7CT,SAAsBC,GACnBA,EAAEC,iBACF,IAAIC,EAAW,IAAIC,SAASH,EAAEI,QAFR,uBAGtB,YAAiBZ,EAAjB,+CAAwB,CAAC,IAAhBa,EAAe,QACjBC,EAAMD,EAAKE,mBACfD,EAAMA,EAAIE,MAAM,GAAIH,EAAKI,KAAKC,QAC9BR,EAASS,OAAO,QAASL,IANN,kFAQtBM,IAAMC,KAAK,UAAWX,GAClBY,MAAK,SAAAC,GACCA,EAAIC,MACLC,QAAQC,IAAI,SAAUH,EAAIC,SAI7BG,OAAM,SAAAC,GACNH,QAAQC,IAAI,YAAaE,QA+BzB,2BACGzB,UAAU,qBACV0B,QAAS3B,GAELR,GAAkB,qCAAU,6BAAV,WACf,2CAEV,2BACGoC,GAAG,4BACH3B,UAAU,4BACVc,KAAK,SACLc,KAAK,OACLC,gBAAgB,OAChBC,aAAa,OACbC,SAzCZ,SAAwB1B,GACrB,IAAIR,EAAQQ,EAAEI,OAAOZ,MACjBH,EAAO,EACXsC,MAAMC,UAAUC,QAAQC,KAAKtC,GAAO,SAACa,GAAD,OAAUhB,GAAQgB,EAAKhB,QAC3DA,EAAO0C,SAAS1C,EAAO,KAAS,IAAM,MACtCI,EAASD,GACTD,EAAa,CACVF,OACAD,OAAQI,EAAMkB,SAEjBvB,GAAkB,MAiCZ,2BACGmC,GAAG,4BACH3B,UAAU,4BACV4B,KAAK,SACLS,SAAU9C,OCjEL+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.233cf382.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios'\nimport './App.scss';\n\nfunction App() {\n\n   let [uploadDisabled, setUploadDisabled] = useState(true)\n   let [filesInfo, setFilesInfo] = useState({ amount: 0, size: 0 })\n   let [files, setFiles] = useState([])\n\n   function submitUpload(e) {\n      e.preventDefault()\n      var formData = new FormData(e.target);\n      for (let file of files) {\n         let dir = file.webkitRelativePath;\n         dir = dir.slice(0, -file.name.length)\n         formData.append(\"paths\", dir);\n      }\n      axios.post('/upload', formData)\n         .then(res => {\n            if (res.data) {\n               console.log('res:  ', res.data)\n            } else {\n               //  throw err\n            }\n         }).catch(err => {\n            console.log('catched: ', err)\n         })\n   }\n\n   function handleFilesAdd(e) {\n      let files = e.target.files\n      let size = 0;\n      Array.prototype.forEach.call(files, (file) => size += file.size)\n      size = parseInt(size / 10000) / 100 + ' MB'\n      setFiles(files)\n      setFilesInfo({\n         size,\n         amount: files.length\n      })\n      setUploadDisabled(false)\n   }\n   let labelFor = uploadDisabled ? 'upload-form__input-browse' : 'upload-form__input-upload'\n\n   return (\n      <div className=\"App\">\n         <div\n            className='file-info'\n         >{filesInfo.amount} files chosen <br />{filesInfo.size} total size\n         </div>\n         <form\n            className='upload-form'\n            method='POST'\n            action='/upload'\n            encType=\"multipart/form-data\"\n            onSubmit={submitUpload}\n         >\n            <label\n               className='upload-form__label'\n               htmlFor={labelFor}\n            >{\n                  (uploadDisabled && <p>wybierz<br />folder</p>)\n                  || (<p>wy≈õlij</p>)\n               }</label>\n            <input\n               id='upload-form__input-browse'\n               className='upload-form__input-browse'\n               name='upload'\n               type='file'\n               webkitdirectory=\"true\"\n               mozdirectory=\"true\"\n               onChange={handleFilesAdd}\n            />\n            <input\n               id='upload-form__input-upload'\n               className='upload-form__input-upload'\n               type='submit'\n               disabled={uploadDisabled}\n            />\n         </form>\n      </div>\n   );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}