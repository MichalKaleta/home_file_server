{"version":3,"sources":["AirQuality/airQuality.js","Weather/Weather.js","Download/Download.js","Upload/Upload.js","App.js","serviceWorker.js","index.js"],"names":["emojis","AirQuality","location","useState","time","setTime","smogData","setSmogData","setErrorMessage","useEffect","lat","lng","apiCallInterval","setInterval","Date","latitude","longitude","axios","get","params","maxDistanceKM","indexType","apikey","headers","then","res","pm25","data","current","values","value","pm10","description","indexes","color","catch","err","message","clearInterval","className","style","Math","floor","round","weather","setWeather","lon","units","lang","APPID","temp","list","main","icon","src","Download","newFiles","children","directories","setDirectories","toggleDirectoryExpand","e","stopPropagation","currentVlass","currentTarget","console","log","renderDirectories","dirArr","fileArr","map","item","i","type","push","key","path","onClick","name","post","filePath","responseType","Upload","newFileUploaded","uploadDisabled","setUploadDisabled","amount","size","filesInfo","setFilesInfo","files","setFiles","labelFor","method","action","encType","onSubmit","preventDefault","formData","FormData","target","file","dir","webkitRelativePath","slice","length","append","success","response","htmlFor","id","webkitdirectory","mozdirectory","onChange","Array","prototype","forEach","call","parseInt","disabled","App","setNewFiles","setLocation","navigator","geolocation","getCurrentPosition","coords","bool","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d53fb47.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './airQuality.scss';\n\nconst airlyKey = '3Ji1PasWSpiM1FM52Sxh2NQGW409ElPl'\nconst emojis = ['ðŸ˜»', 'ðŸ™‚', 'ðŸ˜‘', 'ðŸ˜¬', 'ðŸ™Š', 'ðŸ˜¤', 'ðŸ¤¬', 'ðŸ¤¢', 'ðŸ’€']\n\nexport default function AirQuality({ location }) {\n\n   const [time, setTime] = useState()\n   const [smogData, setSmogData] = useState()\n   const [errorMessage, setErrorMessage] = useState()\n\n   useEffect(() => {\n      const apiCallInterval = setInterval(() => {\n         setTime(new Date())\n      }, (1000 * 60 * 60))\n      getAirQuality(location.latitude, location.longitude)\n      return () => clearInterval(apiCallInterval)\n   }, [location, time])\n\n   function getAirQuality(lat, lng) {\n      axios.get('https://airapi.airly.eu/v2/measurements/nearest', {\n         params: { lat, lng, maxDistanceKM: 10, indexType: 'AIRLY_CAQI', apikey: airlyKey },\n         headers: { 'Accept-Language': 'pl' }\n      }).then(res => {\n         setSmogData({\n            pm25: res.data.current.values[1].value,\n            pm10: res.data.current.values[2].value,\n            description: res.data.current.indexes[0].description,\n            color: res.data.current.indexes[0].color\n         })\n      }).catch(err => { setErrorMessage(err.message) })\n   }\n   return (\n      smogData && (\n         <div className='air-quality__container'>\n            <div\n               className='air-quality__description'\n               style={{ color: smogData.color }}\n            >{\n                  `${smogData.description} ${emojis[Math.floor(smogData.pm10 * 2 / 50)]}`\n               }</div>\n            <div>\n               PM10<span style={{ color: smogData.color }}>{` ${Math.round(smogData.pm10 * 2)}% `}</span>\n               | PM2.5<span style={{ color: smogData.color }}>{` ${Math.round(smogData.pm25 * 4)}%`}</span>\n            </div>\n         </div>\n      ) || <div></div>\n   )\n}\n\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './Weather.scss';\n\nconst weatherKey = '7bec195acf79e266f65c8bf808b61263'\n\nexport default function AirQuality({ location }) {\n\n   const [weather, setWeather] = useState()\n   const [time, setTime] = useState()\n   const [errorMessage, setErrorMessage] = useState()\n\n   useEffect(() => {\n      const apiCallInterval = setInterval(() => {\n         setTime(new Date())\n      }, (1000 * 60 * 60))\n      getWeather(location.latitude, location.longitude)\n      return () => clearInterval(apiCallInterval)\n   }, [location, time])\n   function getWeather(lat, lon) {\n      return axios.get(`http://api.openweathermap.org/data/2.5/forecast`, {\n         params: { lat, lon, units: 'metric', lang: 'pl', APPID: weatherKey }\n      }).then(res => {\n         setWeather({\n            temp: res.data.list[0].main.temp,\n            description: res.data.list[0].weather[0].description,\n            icon: res.data.list[0].weather[0].icon\n         })\n      }).catch(err => { setErrorMessage(err.message) })\n   }\n\n   return (\n      weather && (\n         <div className='weather__container'>\n            <div className='weather__temperature'>{Math.round(weather.temp)}&#176;</div>\n            <div className='weather__aura'>\n               <img src={`http://openweathermap.org/img/wn/${weather.icon}@2x.png`} />\n               <div className='weather__description'>  {weather.description}</div>\n            </div>\n         </div>\n      ) || <div></div>\n   )\n}\n\n","import React, { useState, useEffect, createElement } from 'react';\nimport axios from 'axios'\nimport './Download.scss'\n\nfunction Download({ newFiles }) {\n\n   let [directories, setDirectories] = useState({ children: [] })\n\n   useEffect(() => {\n      console.log('refetch')\n      axios.get('/download')\n         .then(res => {\n            if (res.data) {\n               setDirectories(res.data)\n            } else {\n               throw res\n            }\n         }).catch(err => {\n            console.log('catched: ', err.data)\n         })\n   }, [newFiles])\n\n   function downloadFile(path) {\n      //TODO : force download , directory download///\n      axios.post(`/file`, { filePath: path }, {\n         headers: {\n            responseType: 'blob'\n         }\n      })\n         .then(res => {\n            console.log(res.data)\n         }).catch(err => {\n            console.log('catched: ', err.data)\n         })\n   }\n\n   function toggleDirectoryExpand(e) {\n      e.stopPropagation()\n      let currentVlass = e.currentTarget.className;\n      e.currentTarget.className = (currentVlass === `download-list__folder folder--closed`)\n         ? 'download-list__folder folder--open'\n         : 'download-list__folder folder--closed'\n   }\n\n   function renderDirectories(directories) {\n      let dirArr = [],\n         fileArr = []\n      directories.children.map((item, i) => {\n         if (item.type === 'directory') {\n            dirArr.push(\n               <ul\n                  className={`download-list__folder folder--closed`}\n                  key={item.path}\n                  onClick={toggleDirectoryExpand}\n               ><p\n                  onClick={() => { }}\n               >{item.name}\n                  </p>\n                  {renderDirectories(item)}\n               </ul >\n            )\n         } else {\n            fileArr.push(\n               <li\n                  className={'download-list__files'}\n                  key={item.path}\n                  onClick={() => { downloadFile(item.path) }}\n               ><p><em>{item.name}</em></p></li>\n            )\n         }\n      })\n      return [...dirArr, ...fileArr]\n   }\n\n   return (\n      <div className=\"Download\">\n         <ul\n            className={'download-list'}\n         >{\n               renderDirectories(directories)\n            }</ul>\n      </div>\n   );\n}\n\nexport default Download;\n","import React, { useState } from 'react';\nimport axios from 'axios'\nimport './Upload.scss'\nfunction Upload({ newFileUploaded }) {\n\n   let [uploadDisabled, setUploadDisabled] = useState(true)\n   let [filesInfo, setFilesInfo] = useState({ amount: 0, size: 0 })\n   let [files, setFiles] = useState([])\n\n   function submitUpload(e) {\n      e.preventDefault()\n      var formData = new FormData(e.target);\n      for (let file of files) {\n         let dir = file.webkitRelativePath;\n         dir = dir.slice(0, -file.name.length)\n         formData.append(\"paths\", dir);\n      }\n      axios.post('/upload', formData)\n         .then(res => {\n            if (res.data.success) {\n               newFileUploaded(true)\n               console.log('res:  ', res.data.success)\n            } else {\n               throw res\n            }\n         }).catch(err => {\n            console.log('catched: ', err.response.data)\n         })\n   }\n\n   function handleFilesAdd(e) {\n      let files = e.target.files\n      let size = 0;\n      Array.prototype.forEach.call(files, (file) => size += file.size)\n      size = parseInt(size / 10000) / 100 + ' MB'\n      setFiles(files)\n      setFilesInfo({\n         size,\n         amount: files.length\n      })\n      setUploadDisabled(false)\n   }\n   let labelFor = uploadDisabled ? 'upload-form__input-browse' : 'upload-form__input-upload'\n\n   return (\n      <div className=\"Upload\">\n         <div\n            className='file-info'\n         >{filesInfo.amount} files chosen <br />{filesInfo.size} total size\n         </div>\n         <form\n            className='upload-form'\n            method='POST'\n            action='/upload'\n            encType=\"multipart/form-data\"\n            onSubmit={submitUpload}\n         >\n            <label\n               className='upload-form__label'\n               htmlFor={labelFor}\n            >{\n                  (uploadDisabled && <p>wybierz<br />folder</p>)\n                  || (<p>wyÅ›lij</p>)\n               }</label>\n            <input\n               id='upload-form__input-browse'\n               className='upload-form__input-browse'\n               name='upload'\n               type='file'\n               webkitdirectory=\"true\"\n               mozdirectory=\"true\"\n               onChange={handleFilesAdd}\n            />\n            <input\n               id='upload-form__input-upload'\n               className='upload-form__input-upload'\n               type='submit'\n               disabled={uploadDisabled}\n            />\n         </form>\n      </div>\n   );\n}\n\nexport default Upload;\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport AirQuality from './AirQuality/airQuality'\nimport Weather from './Weather/Weather'\nimport Download from './Download/Download';\nimport Upload from './Upload/Upload';\n\nfunction App() {\n\n   let [newFiles, setNewFiles] = useState(false)\n   let [location, setLocation] = useState({\n      latitude: 50.0438756,\n      longitude: 19.957271\n   })\n\n   useEffect(() => {\n      navigator.geolocation.getCurrentPosition(res => {\n         const { latitude, longitude } = res.coords\n         setLocation({ latitude, longitude })\n      })\n   }, [])\n\n   function newFileUploaded(bool) {\n      setNewFiles(true)\n   }\n\n   return (\n      <div className=\"App\">{\n         location && (\n            <div className=\"outside-data__contaier\">\n               <AirQuality\n                  location={location}\n               />\n               <Weather\n                  location={location}\n               />\n            </div>)}\n         <Upload\n            newFileUploaded={newFileUploaded}\n         />\n         <Download\n            newFiles={newFiles}\n         />\n      </div>\n   );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}